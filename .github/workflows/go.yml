## TODO:
## - Matrix/multi-platform builds
## - Reusable steps/workflows, for things like Slack notifications

name: Go

## TODO: Configure accordingly
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  # Project configuration
  PROJECT_NAME: hackchat

  # Global Slack notification configuration
  SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
  SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL }}
  SLACK_USERNAME: GitHub Actions
  SLACK_ICON: https://avatars1.githubusercontent.com/u/44036562?s=280&v=4

jobs:

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Prepare
      id: prep
      run: |
        DOCKER_IMAGE=${GITHUB_REPOSITORY}/${PROJECT_NAME}
        VERSION=edge
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        elif [[ $GITHUB_REF == refs/heads/* ]]; then
          VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
        elif [[ $GITHUB_REF == refs/pull/* ]]; then
          VERSION=pr-${{ github.event.number }}
        fi
        TAGS="${DOCKER_IMAGE}:${VERSION}"
        if [ "${{ github.event_name }}" = "push" ]; then
          TAGS="$TAGS,${DOCKER_IMAGE}:sha-${GITHUB_SHA::8}"
        fi
        echo ::set-output name=version::${VERSION}
        echo ::set-output name=tags::${TAGS}
        echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: ^1.15 ## TODO: Switch to Go 1.16 once it releases

    - name: Get dependencies
      ## TODO: Once Go 1.16 releases, try doing universal binaries
      ##       for macOS, eg. Intel + aarch64 in one binary, right?
      run: make deps
      # run: |
      #   go build -v -mod=vendor ./...

    - name: Build
      run: make build

    - name: Test
      run: |
        make test
        make install
        make uninstall

    ## TODO: Signify arch/platform in binary name,
    ##       at least once we do multi-platform builds
    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: hackchat
        path: hackchat

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to GitHub Packages
      uses: docker/login-action@v1
      with:
        registry: docker.pkg.github.com
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Push to GitHub Packages
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.prep.outputs.tags }}
        labels: |
          org.opencontainers.image.source=${{ github.event.repository.html_url }}
          org.opencontainers.image.created=${{ steps.prep.outputs.created }}
          org.opencontainers.image.revision=${{ github.sha }}

    - name: Failure notification
      if: failure()
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_COLOR: '#de0d0d'
        SLACK_TITLE: Docker Publish FAILED
        SLACK_MESSAGE: ':x: _${{ env.PROJECT_NAME }}_ failed to publish with tag *${{ steps.prep.outputs.tags }}*'

    - name: Success notification
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_COLOR: '#1eb80d'
        SLACK_TITLE: Docker Publish SUCCESS
        SLACK_MESSAGE: ':white_check_mark: _${{ env.PROJECT_NAME }}_ published with tag *${{ steps.prep.outputs.tags }}*'
